{% extends 'admin/base.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block admin_body %}
  <div class="max-w-xl mx-auto bg-white p-8 rounded-lg shadow">
    <h1 class="text-2xl font-semibold mb-6">{{ title }}</h1>

    {% for msg in app.flashes('success') %}
      <div class="mb-4 bg-green-100 text-green-800 px-4 py-2 rounded">
        {{ msg }}
      </div>
    {% endfor %}

    {{ form_start(form, {'attr': {'class': 'space-y-4'}}) }}
      {{ form_row(form.name, {
         'label': 'Nom de l’établissement',
         'attr': {'class': 'block w-full px-4 py-2 border rounded'}
      }) }}
      {{ form_row(form.type, {
         'label': 'Type',
         'attr': {'class': 'block w-full px-4 py-2 border rounded'}
      }) }}
      {{ form_row(form.address, {
         'label': 'Adresse',
         'attr': {'class': 'block w-full px-4 py-2 border rounded'}
      }) }}
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const addressInput = document.querySelector('input[name$="[address]"]');
          const validationMessage = document.getElementById('address-validation');

          const latInput = document.querySelector('input[name$="[latitude]"]');
          const lonInput = document.querySelector('input[name$="[longitude]"]');

          if (addressInput && latInput && lonInput) {
            addressInput.addEventListener('blur', () => {
              const address = addressInput.value;
              if (address.length < 5) {
                validationMessage.textContent = "Adresse trop courte.";
                validationMessage.classList.remove('text-green-600');
                validationMessage.classList.add('text-red-600');
                return;
              }

              fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                .then(res => res.json())
                .then(data => {
                  if (data.length > 0) {
                    validationMessage.textContent = "Adresse reconnue.";
                    validationMessage.classList.remove('text-red-600');
                    validationMessage.classList.add('text-green-600');

                    latInput.value = data[0].lat;
                    lonInput.value = data[0].lon;
                  } else {
                    validationMessage.textContent = "Adresse introuvable.";
                    validationMessage.classList.remove('text-green-600');
                    validationMessage.classList.add('text-red-600');
                  }
                })
                .catch((error) => {
                  validationMessage.textContent = "Erreur de validation.";
                  validationMessage.classList.remove('text-green-600');
                  validationMessage.classList.add('text-red-600');
                });
            });

            function updateAddressFromCoordinates() {
              const lat = latInput.value;
              const lon = lonInput.value;
              if (lat && lon) {
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`)
                  .then(res => res.json())
                  .then(data => {
                    if (data && data.display_name) {
                      addressInput.value = data.display_name;
                      validationMessage.textContent = "Adresse récupérée depuis les coordonnées.";
                      validationMessage.classList.remove('text-red-600');
                      validationMessage.classList.add('text-green-600');
                    }
                  })
                  .catch(() => {
                    validationMessage.textContent = "Erreur lors de la récupération de l'adresse.";
                    validationMessage.classList.remove('text-green-600');
                    validationMessage.classList.add('text-red-600');
                  });
              }
            }

            latInput.addEventListener('blur', updateAddressFromCoordinates);
            lonInput.addEventListener('blur', updateAddressFromCoordinates);
          }
        });
      </script>
      <div id="address-validation" class="text-sm text-gray-500"></div>
      {{ form_row(form.description, {
         'label': 'Description',
         'attr': {'class': 'block w-full px-4 py-2 border rounded'}
      }) }}
      {{ form_row(form.status, {
         'label': 'Statut',
         'attr': {'class': 'block w-full px-4 py-2 border rounded'}
      }) }}
      {% if form.latitude is defined %}
        {{ form_label(form.latitude, 'Latitude', {'label_attr': {'class': 'block text-gray-700 mb-2'}}) }}
        {{ form_widget(form.latitude, {'attr': {'id': 'latitude-field', 'class': 'block w-full px-4 py-2 border rounded'}}) }}
      {% endif %}
      {% if form.longitude is defined %}
        {{ form_label(form.longitude, 'Longitude', {'label_attr': {'class': 'block text-gray-700 mb-2'}}) }}
        {{ form_widget(form.longitude, {'attr': {'id': 'longitude-field', 'class': 'block w-full px-4 py-2 border rounded'}}) }}
      {% endif %}
      <div id="loader" class="hidden text-center text-blue-600 mb-2">
        <svg class="animate-spin h-5 w-5 mx-auto mb-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
        </svg>
        Enregistrement en cours...
      </div>
      <button
        type="submit"
        class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition"
      >Enregistrer</button>
    {{ form_end(form) }}

    <div class="mt-4 text-center">
      <a href="{{ path('admin_place_list') }}" class="text-sm text-gray-600 hover:underline">← Retour à la liste</a>
    </div>
  <script>
    const form = document.querySelector('form[name="place"]');
    const submitButton = form.querySelector('button[type="submit"]');
    const loader = document.getElementById('loader');

    if (form && submitButton && loader) {
      form.addEventListener('submit', () => {
        loader.classList.remove('hidden');
        submitButton.disabled = true;
      });
    }
  </script>
  </div>
{% endblock %}
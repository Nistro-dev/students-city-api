security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/
            provider: app_user_provider

            lazy: true
            form_login:
                login_path: login
                check_path: login
                username_parameter: email
                password_parameter: password
                use_referer: true
                default_target_path: profile
                always_use_default_target_path: true
            user_checker: App\Security\FrontUserChecker
            logout:
                path:   /logout
                target: login

        public_api:
            pattern: ^/api/(login|register)$
            security: false

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

    access_control:
        - { path: ^/login$,   roles: PUBLIC_ACCESS }
        - { path: ^/register$, roles: PUBLIC_ACCESS }
        - { path: ^/logout$,  roles: IS_AUTHENTICATED_FULLY }

        - { path: ^/profile$, roles: IS_AUTHENTICATED_FULLY }

        - { path: ^/admin,    roles: ROLE_ADMIN }

        - { path: ^/api/(login|register)$, roles: PUBLIC_ACCESS }
        - { path: ^/api/users$,           roles: ROLE_ADMIN }
        - { path: ^/api/me$,              roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api,                  roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]